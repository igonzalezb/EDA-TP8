#pragma once

#include "main.h"
#include "Graphics.h"
#include "List.h"
#include "Tile.h"

class Board
{
	
public:
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	//		BOARD
	//	Constructor de la clase que recibe un puntero a una lista
	////////////////////////////////////////////////////////////////////////////////////////////
	Board(List<Tile> *Tiles);
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	//		GET GRAPHICS
	//	Devuelve el objeto graphics
	////////////////////////////////////////////////////////////////////////////////////////////
	Graphic * getGraphics();

	/////////////////////////////////////////////////////////////////////////////////////////////
	//		GET TILES
	//	Devuelve un puntero a la Lista
	////////////////////////////////////////////////////////////////////////////////////////////
	List<Tile> *getTiles();

	/////////////////////////////////////////////////////////////////////////////////////////////
	//		NEXT & PREVIOUS PAGE
	//	Cambia de Pagina
	////////////////////////////////////////////////////////////////////////////////////////////
	void nextPage();
	void previousPage();

	/////////////////////////////////////////////////////////////////////////////////////////////
	//		KEY DISPACHER
	//	Dispacher de eventos de teclado
	////////////////////////////////////////////////////////////////////////////////////////////
	bool keyDispacher(ALLEGRO_EVENT ev);
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	//		REMOVE NON SELECTED
	//	Elimina de la lista los archivos que no fueron seleccionados
	////////////////////////////////////////////////////////////////////////////////////////////
	void removeNonSelected();

	/////////////////////////////////////////////////////////////////////////////////////////////
	//		TOGGLE TILE
	//	Cambia el estado de las seleccionadas
	////////////////////////////////////////////////////////////////////////////////////////////
	void toggleTile(int TileNum); 
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	//		DRAW TILES
	//	Dibuja en pantalla nueve imagenes de la pagina actual
	////////////////////////////////////////////////////////////////////////////////////////////
	void drawTiles();

	/////////////////////////////////////////////////////////////////////////////////////////////
	//		START COMPRESSION
	//	Cambia la pantalla y elimina bitmaps que no se necesitan. 
	//	Llamar antes de la compression
	////////////////////////////////////////////////////////////////////////////////////////////
	void startCompression();

	/////////////////////////////////////////////////////////////////////////////////////////////
	//		DESTRUCTOR
	//	Destructor de Board
	////////////////////////////////////////////////////////////////////////////////////////////
	~Board();
#if IAM == COMPRESSOR
	/////////////////////////////////////////////////////////////////////////////////////////////
	//		LOAD BITMAPS
	//	Crea nueve bitmaps en un arreglo que luego son mostrados en el display
	////////////////////////////////////////////////////////////////////////////////////////////
	void loadBitmaps();

	//////////////////////////////////////////////////////////////////////////////////////////////////
	//		REMOVE NON SUARES & POWER OF 2
	//	Elimina de la lista las imagenes que no son cuadras y su tamaño no es una potencia de 2
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void removeNonSquares();
	
#endif
	
	

private:
	List<Tile> *Tiles = NULL;	//Creo una lista tiles, en la que cada nodo contiene un objeto Tile.
	unsigned int PageNumber;
	unsigned int PageMax;
	Graphic *graphics;
};